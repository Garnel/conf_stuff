" This is a template vimrc by Garnel
" 2012-12-30

"""""""""""""""""""" READE ME """""""""""""""""""""""""
" $HOME is used in many places of this file, Linux will set it automaticly
" when your account is created, if you are in windows, you should set a 
" environment varible named HOME. Actully, the HOME can be set to anywhere 
" you like, but we generally set it to your home directory. For example:
" "C:\Users\Garnel".
" Pakages installed:
"   plugins:
"       DoxygenToolkit
"   themes:
"       solarized

"""""""""""""""""""" Global vars, funcs """""""""""""""
" Is windows or not
if (has("win32") || has("win95") || has("win64") || has("win16"))
    let g:iswindows = 1
else
    let g:iswindows = 0
endif

" If has tab
if v:version < 700
    let g:hastab = 0
else
    let g:hastab = 1
endif

" Open a file in a new buffer or vsplit(version < 7.0, no tab)
function! OpenNew(filename)
    "get fullfile name by replacing beginning "~/" to "$HOME/"
    let fullfn = substitute(a:filename, "^\\~/", $HOME . "/", "")
    
    if g:hastab == 0    "version lower than 7.0
        exec "vsplite " . fullfn
        return 
    endif

    "find in current tab
    let bufwinnr = bufwinnr(fullfn)   "get the window number
    if bufwinnr != -1
        exec bufwinnr . "wincmd w"
        return
    else
        " find in each tab
        tabfirst
        let tab = 1
        while tab <= tabpagenr("$")     "get the number of a tab page
            let bufwinnr = bufwinnr(fullfn)
            if bufwinnr != -1
                exec "normal " . tab . "gt"
                exec bufwinnr . "wincmd w"
                return
            endif
            tabnext
            let tab = tab + 1
        endwhile
        " not exist, new tab
        exec "tabnew " . fullfn
    endif
endfunction

" If has the specific color theme
function! HasTheme(name)
    let pat = "colors/" . a:name . ".vim"
    return !empty(globpath($VIMRUNTIME . "/../", pat)) ||
        \ !empty(globpath($HOME . "/.vim", pat)) 
endfunction

"""""""""""""""""""" General """"""""""""""""""""""""""
" Never compatible with vi, it will cause some annoying peoblems
set nocompatible

" Sets how many lines of history VIM has to remember
set history=1000

" Enable filetype plugin
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Set linenumber (=set nu)
set number

" make backspace work like most other apps
set backspace=2

" encoding
set encoding=utf8
set fencs=utf8,gb18030,gbk,gb2312,utf-16,big5

" turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

" Text, tab and indent related
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab        
set softtabstop=4   "makes spaces feel like tabs (like deleting)

set wrap
set linebreak
set textwidth=100

set autoindent
set smartindent

" set 5 lines to the cursors - when moving vertical
set so=5

" turn on wild menu
set wildmenu        "command-line completion

" always show current position
set ruler

" set the height of commandbar
set cmdheight=2

" change buffer = without saving
set hidden

" ignore case when searching
set ignorecase
set smartcase

" hightlight search things
set hlsearch

" make search act like search in modern browsers
set incsearch
" don't redraw while executing macros
set nolazyredraw

" for regular expressions
set magic

" show matching bracets when text indicator is over them
set showmatch

" how many tenths of a second to blink
set mat=2

" No sounds on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" code folder
set foldmethod=marker

"""""""""""""""""""" Interface """"""""""""""""""""""""
" Switch syntax highlighting on
syntax on
syntax enable
set background=dark
if HasTheme("solarized")
    "nice theme! google solarized and you will find it
    colorscheme solarized
else
    colorscheme default
endif

" set guifont
if g:iswindows == 1
    set guifont=Consolas:h13:cANSI
endif

" Statusline

" Always hide the statusline
set laststatus=2

" Format the statusline
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l/%L:%c

"""""""""""""""""""" Key Binding """"""""""""""""""""""
" With a map leader it's possible to do extra key combinatons
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <c-space> ?
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tj :tabnext<cr>
map <leader>tk :tabprevious<cr>

" Parenthesis/bracket expanding
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i
inoremap $t <><esc>i

" ,d insert date, ,t insert time
let format_time = "%Y-%m-%d %T"     "2012-12-30 22:40:30
let format_date = "%Y-%m-%d"        "2012-12-30
nmap <leader>d a<C-R>=strftime(format_date)<CR><Esc>
imap <leader>d <C-R>=strftime(format_date)<CR>
nmap <leader>t a<C-R>=strftime(format_time)<CR><Esc>
imap <leader>t <C-R>=strftime(format_time)<CR>

"""""""""""""""""""" editing vimrc """"""""""""""""""""
" Name of vimrc
let g:vimrc = ".vimrc"
let g:gvimrc = ".gvimrc"
if (g:iswindows == 1)
    let g:vimrc = "_vimrc"
    let g:gvimrc = "_gvimrc"
endif

let g:vimrc_withdir = $HOME . "/" . g:vimrc
let g:gvimrc_withdir = $HOME . "/" . g:gvimrc

" Load vimrc
if !exists("*LoadVimrc")
    function LoadVimrc()
        if filereadable(g:vimrc_withdir)   "if file exists
            exec "source " . g:vimrc_withdir
        endif

        if has("gui_running") && filereadable(g:gvimrc_withdir)
            exec "source " . g:gvimrc_withdir
        endif
    endfunction
endif

" Fast reload .vimrc
map <silent> <leader>ss :call LoadVimrc()<cr>

" Fast edit .vimrc
map <silent> <leader>ee :call OpenNew(g:vimrc_withdir)<cr>

" When .vimrc is edited, reload it
autocmd! bufwritepost g:vimrc, g:gvimrc call LoadVimrc()

"""""""""""""""""""" For coding """""""""""""""""""""""
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d sts=%d:",
        \ &tabstop, &shiftwidth, &textwidth, &sts)
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), "")  "empty line
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" Supported by DoxygenToolkit, a nice plugin to make doc comment
let g:DoxygenToolkit_authorName="Garnel"

" cscope is on the way
